<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="47238"><g><title>__GI___sched_yield (11 samples, 0.02%)</title><rect x="0.0021%" y="373" width="0.0233%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="11"/><text x="0.2521%" y="383.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="0.0254%" y="373" width="0.0106%" height="15" fill="rgb(217,0,24)" fg:x="12" fg:w="5"/><text x="0.2754%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (19 samples, 0.04%)</title><rect x="0.0381%" y="373" width="0.0402%" height="15" fill="rgb(221,193,54)" fg:x="18" fg:w="19"/><text x="0.2881%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (16 samples, 0.03%)</title><rect x="0.0783%" y="373" width="0.0339%" height="15" fill="rgb(248,212,6)" fg:x="37" fg:w="16"/><text x="0.3283%" y="383.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (15 samples, 0.03%)</title><rect x="0.1122%" y="373" width="0.0318%" height="15" fill="rgb(208,68,35)" fg:x="53" fg:w="15"/><text x="0.3622%" y="383.50"></text></g><g><title>epoll_wait (5 samples, 0.01%)</title><rect x="0.1440%" y="373" width="0.0106%" height="15" fill="rgb(232,128,0)" fg:x="68" fg:w="5"/><text x="0.3940%" y="383.50"></text></g><g><title>ringbuf_process_ring (7 samples, 0.01%)</title><rect x="0.1545%" y="373" width="0.0148%" height="15" fill="rgb(207,160,47)" fg:x="73" fg:w="7"/><text x="0.4045%" y="383.50"></text></g><g><title>[[heap]] (80 samples, 0.17%)</title><rect x="0.0021%" y="389" width="0.1694%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="80"/><text x="0.2521%" y="399.50"></text></g><g><title>__GI___libc_free (8 samples, 0.02%)</title><rect x="0.1715%" y="373" width="0.0169%" height="15" fill="rgb(218,30,26)" fg:x="81" fg:w="8"/><text x="0.4215%" y="383.50"></text></g><g><title>_int_free (18 samples, 0.04%)</title><rect x="0.1884%" y="373" width="0.0381%" height="15" fill="rgb(220,122,19)" fg:x="89" fg:w="18"/><text x="0.4384%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv_timeout (18 samples, 0.04%)</title><rect x="0.2265%" y="373" width="0.0381%" height="15" fill="rgb(250,228,42)" fg:x="107" fg:w="18"/><text x="0.4765%" y="383.50"></text></g><g><title>[[stack]] (45 samples, 0.10%)</title><rect x="0.1715%" y="389" width="0.0953%" height="15" fill="rgb(240,193,28)" fg:x="81" fg:w="45"/><text x="0.4215%" y="399.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.02%)</title><rect x="0.2689%" y="373" width="0.0169%" height="15" fill="rgb(216,20,37)" fg:x="127" fg:w="8"/><text x="0.5189%" y="383.50"></text></g><g><title>libbpf_rs::ringbuf::RingBuffer::poll (9 samples, 0.02%)</title><rect x="0.2921%" y="373" width="0.0191%" height="15" fill="rgb(206,188,39)" fg:x="138" fg:w="9"/><text x="0.5421%" y="383.50"></text></g><g><title>[anon] (33 samples, 0.07%)</title><rect x="0.2689%" y="389" width="0.0699%" height="15" fill="rgb(217,207,13)" fg:x="127" fg:w="33"/><text x="0.5189%" y="399.50"></text></g><g><title>ringbuf_process_ring (13 samples, 0.03%)</title><rect x="0.3112%" y="373" width="0.0275%" height="15" fill="rgb(231,73,38)" fg:x="147" fg:w="13"/><text x="0.5612%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (51 samples, 0.11%)</title><rect x="0.3387%" y="373" width="0.1080%" height="15" fill="rgb(225,20,46)" fg:x="160" fg:w="51"/><text x="0.5887%" y="383.50"></text></g><g><title>__GI___clock_gettime (9 samples, 0.02%)</title><rect x="0.4509%" y="373" width="0.0191%" height="15" fill="rgb(210,31,41)" fg:x="213" fg:w="9"/><text x="0.7009%" y="383.50"></text></g><g><title>__GI___libc_free (5 samples, 0.01%)</title><rect x="0.4700%" y="373" width="0.0106%" height="15" fill="rgb(221,200,47)" fg:x="222" fg:w="5"/><text x="0.7200%" y="383.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.04%)</title><rect x="0.4805%" y="373" width="0.0423%" height="15" fill="rgb(226,26,5)" fg:x="227" fg:w="20"/><text x="0.7305%" y="383.50"></text></g><g><title>_int_free (9 samples, 0.02%)</title><rect x="0.5229%" y="373" width="0.0191%" height="15" fill="rgb(249,33,26)" fg:x="247" fg:w="9"/><text x="0.7729%" y="383.50"></text></g><g><title>_int_malloc (5 samples, 0.01%)</title><rect x="0.5419%" y="373" width="0.0106%" height="15" fill="rgb(235,183,28)" fg:x="256" fg:w="5"/><text x="0.7919%" y="383.50"></text></g><g><title>common::bpf_prog::create_event_handler::{{closure}} (37 samples, 0.08%)</title><rect x="0.5525%" y="373" width="0.0783%" height="15" fill="rgb(221,5,38)" fg:x="261" fg:w="37"/><text x="0.8025%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv_timeout (25 samples, 0.05%)</title><rect x="0.6308%" y="373" width="0.0529%" height="15" fill="rgb(247,18,42)" fg:x="298" fg:w="25"/><text x="0.8808%" y="383.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (22 samples, 0.05%)</title><rect x="0.6838%" y="373" width="0.0466%" height="15" fill="rgb(241,131,45)" fg:x="323" fg:w="22"/><text x="0.9338%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (40 samples, 0.08%)</title><rect x="0.7303%" y="373" width="0.0847%" height="15" fill="rgb(249,31,29)" fg:x="345" fg:w="40"/><text x="0.9803%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (17 samples, 0.04%)</title><rect x="0.8150%" y="373" width="0.0360%" height="15" fill="rgb(225,111,53)" fg:x="385" fg:w="17"/><text x="1.0650%" y="383.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (40 samples, 0.08%)</title><rect x="0.8510%" y="373" width="0.0847%" height="15" fill="rgb(238,160,17)" fg:x="402" fg:w="40"/><text x="1.1010%" y="383.50"></text></g><g><title>ring_buffer__poll (5 samples, 0.01%)</title><rect x="0.9378%" y="373" width="0.0106%" height="15" fill="rgb(214,148,48)" fg:x="443" fg:w="5"/><text x="1.1878%" y="383.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (8 samples, 0.02%)</title><rect x="0.9484%" y="373" width="0.0169%" height="15" fill="rgb(232,36,49)" fg:x="448" fg:w="8"/><text x="1.1984%" y="383.50"></text></g><g><title>[unknown] (304 samples, 0.64%)</title><rect x="0.3387%" y="389" width="0.6435%" height="15" fill="rgb(209,103,24)" fg:x="160" fg:w="304"/><text x="0.5887%" y="399.50"></text></g><g><title>std::time::SystemTime::checked_add (8 samples, 0.02%)</title><rect x="0.9653%" y="373" width="0.0169%" height="15" fill="rgb(229,88,8)" fg:x="456" fg:w="8"/><text x="1.2153%" y="383.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.02%)</title><rect x="0.9823%" y="389" width="0.0212%" height="15" fill="rgb(213,181,19)" fg:x="464" fg:w="10"/><text x="1.2323%" y="399.50"></text></g><g><title>__GI___pthread_disable_asynccancel (31 samples, 0.07%)</title><rect x="1.2744%" y="261" width="0.0656%" height="15" fill="rgb(254,191,54)" fg:x="602" fg:w="31"/><text x="1.5244%" y="271.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (5 samples, 0.01%)</title><rect x="1.3464%" y="261" width="0.0106%" height="15" fill="rgb(241,83,37)" fg:x="636" fg:w="5"/><text x="1.5964%" y="271.50"></text></g><g><title>sysvec_apic_timer_interrupt (5 samples, 0.01%)</title><rect x="1.3464%" y="245" width="0.0106%" height="15" fill="rgb(233,36,39)" fg:x="636" fg:w="5"/><text x="1.5964%" y="255.50"></text></g><g><title>do_syscall_64 (31 samples, 0.07%)</title><rect x="1.3591%" y="261" width="0.0656%" height="15" fill="rgb(226,3,54)" fg:x="642" fg:w="31"/><text x="1.6091%" y="271.50"></text></g><g><title>entry_SYSCALL_64 (773 samples, 1.64%)</title><rect x="1.4247%" y="261" width="1.6364%" height="15" fill="rgb(245,192,40)" fg:x="673" fg:w="773"/><text x="1.6747%" y="271.50"></text></g><g><title>__x64_sys_epoll_wait (42 samples, 0.09%)</title><rect x="4.5112%" y="245" width="0.0889%" height="15" fill="rgb(238,167,29)" fg:x="2131" fg:w="42"/><text x="4.7612%" y="255.50"></text></g><g><title>__fget_files (126 samples, 0.27%)</title><rect x="5.0531%" y="165" width="0.2667%" height="15" fill="rgb(232,182,51)" fg:x="2387" fg:w="126"/><text x="5.3031%" y="175.50"></text></g><g><title>__fdget (131 samples, 0.28%)</title><rect x="5.0447%" y="197" width="0.2773%" height="15" fill="rgb(231,60,39)" fg:x="2383" fg:w="131"/><text x="5.2947%" y="207.50"></text></g><g><title>__fget_light (128 samples, 0.27%)</title><rect x="5.0510%" y="181" width="0.2710%" height="15" fill="rgb(208,69,12)" fg:x="2386" fg:w="128"/><text x="5.3010%" y="191.50"></text></g><g><title>__fget_light (56 samples, 0.12%)</title><rect x="5.3220%" y="197" width="0.1185%" height="15" fill="rgb(235,93,37)" fg:x="2514" fg:w="56"/><text x="5.5720%" y="207.50"></text></g><g><title>__put_user_nocheck_4 (86 samples, 0.18%)</title><rect x="7.1870%" y="181" width="0.1821%" height="15" fill="rgb(213,116,39)" fg:x="3395" fg:w="86"/><text x="7.4370%" y="191.50"></text></g><g><title>__put_user_nocheck_8 (80 samples, 0.17%)</title><rect x="7.3691%" y="181" width="0.1694%" height="15" fill="rgb(222,207,29)" fg:x="3481" fg:w="80"/><text x="7.6191%" y="191.50"></text></g><g><title>_raw_write_lock_irq (33 samples, 0.07%)</title><rect x="7.5384%" y="181" width="0.0699%" height="15" fill="rgb(206,96,30)" fg:x="3561" fg:w="33"/><text x="7.7884%" y="191.50"></text></g><g><title>queued_write_lock_slowpath (6 samples, 0.01%)</title><rect x="7.5956%" y="165" width="0.0127%" height="15" fill="rgb(218,138,4)" fg:x="3588" fg:w="6"/><text x="7.8456%" y="175.50"></text></g><g><title>ep_done_scan (11 samples, 0.02%)</title><rect x="7.6104%" y="181" width="0.0233%" height="15" fill="rgb(250,191,14)" fg:x="3595" fg:w="11"/><text x="7.8604%" y="191.50"></text></g><g><title>__cond_resched (6 samples, 0.01%)</title><rect x="8.6265%" y="165" width="0.0127%" height="15" fill="rgb(239,60,40)" fg:x="4075" fg:w="6"/><text x="8.8765%" y="175.50"></text></g><g><title>_raw_write_lock_irq (210 samples, 0.44%)</title><rect x="8.6435%" y="165" width="0.4446%" height="15" fill="rgb(206,27,48)" fg:x="4083" fg:w="210"/><text x="8.8935%" y="175.50"></text></g><g><title>queued_write_lock_slowpath (18 samples, 0.04%)</title><rect x="9.0499%" y="149" width="0.0381%" height="15" fill="rgb(225,35,8)" fg:x="4275" fg:w="18"/><text x="9.2999%" y="159.50"></text></g><g><title>bpf_map_poll (91 samples, 0.19%)</title><rect x="9.0880%" y="165" width="0.1926%" height="15" fill="rgb(250,213,24)" fg:x="4293" fg:w="91"/><text x="9.3380%" y="175.50"></text></g><g><title>_raw_write_lock_irq (882 samples, 1.87%)</title><rect x="9.6003%" y="149" width="1.8671%" height="15" fill="rgb(247,123,22)" fg:x="4535" fg:w="882"/><text x="9.8503%" y="159.50">_..</text></g><g><title>queued_write_lock_slowpath (508 samples, 1.08%)</title><rect x="10.3921%" y="133" width="1.0754%" height="15" fill="rgb(231,138,38)" fg:x="4909" fg:w="508"/><text x="10.6421%" y="143.50"></text></g><g><title>ep_done_scan (1,041 samples, 2.20%)</title><rect x="9.2807%" y="165" width="2.2037%" height="15" fill="rgb(231,145,46)" fg:x="4384" fg:w="1041"/><text x="9.5307%" y="175.50">e..</text></g><g><title>queued_write_lock_slowpath (7 samples, 0.01%)</title><rect x="11.4696%" y="149" width="0.0148%" height="15" fill="rgb(251,118,11)" fg:x="5418" fg:w="7"/><text x="11.7196%" y="159.50"></text></g><g><title>bpf_map_poll (1,210 samples, 2.56%)</title><rect x="12.2550%" y="149" width="2.5615%" height="15" fill="rgb(217,147,25)" fg:x="5789" fg:w="1210"/><text x="12.5050%" y="159.50">bp..</text></g><g><title>ringbuf_map_poll (1,202 samples, 2.54%)</title><rect x="12.2719%" y="133" width="2.5446%" height="15" fill="rgb(247,81,37)" fg:x="5797" fg:w="1202"/><text x="12.5219%" y="143.50">ri..</text></g><g><title>ep_item_poll.isra.0 (1,642 samples, 3.48%)</title><rect x="11.4844%" y="165" width="3.4760%" height="15" fill="rgb(209,12,38)" fg:x="5425" fg:w="1642"/><text x="11.7344%" y="175.50">ep_..</text></g><g><title>ringbuf_map_poll (68 samples, 0.14%)</title><rect x="14.8165%" y="149" width="0.1440%" height="15" fill="rgb(227,1,9)" fg:x="6999" fg:w="68"/><text x="15.0665%" y="159.50"></text></g><g><title>__cond_resched (11 samples, 0.02%)</title><rect x="15.6272%" y="149" width="0.0233%" height="15" fill="rgb(248,47,43)" fg:x="7382" fg:w="11"/><text x="15.8772%" y="159.50"></text></g><g><title>mutex_lock (335 samples, 0.71%)</title><rect x="14.9604%" y="165" width="0.7092%" height="15" fill="rgb(221,10,30)" fg:x="7067" fg:w="335"/><text x="15.2104%" y="175.50"></text></g><g><title>rcu_all_qs (9 samples, 0.02%)</title><rect x="15.6505%" y="149" width="0.0191%" height="15" fill="rgb(210,229,1)" fg:x="7393" fg:w="9"/><text x="15.9005%" y="159.50"></text></g><g><title>ep_send_events (3,796 samples, 8.04%)</title><rect x="7.6379%" y="181" width="8.0359%" height="15" fill="rgb(222,148,37)" fg:x="3608" fg:w="3796"/><text x="7.8879%" y="191.50">ep_send_eve..</text></g><g><title>mutex_unlock (130 samples, 0.28%)</title><rect x="15.6781%" y="181" width="0.2752%" height="15" fill="rgb(234,67,33)" fg:x="7406" fg:w="130"/><text x="15.9281%" y="191.50"></text></g><g><title>__perf_event_task_sched_out (6 samples, 0.01%)</title><rect x="16.4148%" y="117" width="0.0127%" height="15" fill="rgb(247,98,35)" fg:x="7754" fg:w="6"/><text x="16.6648%" y="127.50"></text></g><g><title>_raw_spin_lock (21 samples, 0.04%)</title><rect x="16.4275%" y="117" width="0.0445%" height="15" fill="rgb(247,138,52)" fg:x="7760" fg:w="21"/><text x="16.6775%" y="127.50"></text></g><g><title>dequeue_entity (5 samples, 0.01%)</title><rect x="16.5079%" y="101" width="0.0106%" height="15" fill="rgb(213,79,30)" fg:x="7798" fg:w="5"/><text x="16.7579%" y="111.50"></text></g><g><title>update_cfs_group (88 samples, 0.19%)</title><rect x="16.7640%" y="69" width="0.1863%" height="15" fill="rgb(246,177,23)" fg:x="7919" fg:w="88"/><text x="17.0140%" y="79.50"></text></g><g><title>reweight_entity (33 samples, 0.07%)</title><rect x="16.8805%" y="53" width="0.0699%" height="15" fill="rgb(230,62,27)" fg:x="7974" fg:w="33"/><text x="17.1305%" y="63.50"></text></g><g><title>__calc_delta (62 samples, 0.13%)</title><rect x="17.0583%" y="53" width="0.1313%" height="15" fill="rgb(216,154,8)" fg:x="8058" fg:w="62"/><text x="17.3083%" y="63.50"></text></g><g><title>__cgroup_account_cputime (8 samples, 0.02%)</title><rect x="17.1896%" y="53" width="0.0169%" height="15" fill="rgb(244,35,45)" fg:x="8120" fg:w="8"/><text x="17.4396%" y="63.50"></text></g><g><title>cgroup_rstat_updated (6 samples, 0.01%)</title><rect x="17.1938%" y="37" width="0.0127%" height="15" fill="rgb(251,115,12)" fg:x="8122" fg:w="6"/><text x="17.4438%" y="47.50"></text></g><g><title>cpuacct_charge (378 samples, 0.80%)</title><rect x="17.2086%" y="53" width="0.8002%" height="15" fill="rgb(240,54,50)" fg:x="8129" fg:w="378"/><text x="17.4586%" y="63.50"></text></g><g><title>update_curr (507 samples, 1.07%)</title><rect x="16.9503%" y="69" width="1.0733%" height="15" fill="rgb(233,84,52)" fg:x="8007" fg:w="507"/><text x="17.2003%" y="79.50"></text></g><g><title>update_min_vruntime (5 samples, 0.01%)</title><rect x="18.0130%" y="53" width="0.0106%" height="15" fill="rgb(207,117,47)" fg:x="8509" fg:w="5"/><text x="18.2630%" y="63.50"></text></g><g><title>__update_load_avg_cfs_rq (35 samples, 0.07%)</title><rect x="18.0998%" y="53" width="0.0741%" height="15" fill="rgb(249,43,39)" fg:x="8550" fg:w="35"/><text x="18.3498%" y="63.50"></text></g><g><title>__update_load_avg_se (24 samples, 0.05%)</title><rect x="18.1739%" y="53" width="0.0508%" height="15" fill="rgb(209,38,44)" fg:x="8585" fg:w="24"/><text x="18.4239%" y="63.50"></text></g><g><title>update_load_avg (96 samples, 0.20%)</title><rect x="18.0236%" y="69" width="0.2032%" height="15" fill="rgb(236,212,23)" fg:x="8514" fg:w="96"/><text x="18.2736%" y="79.50"></text></g><g><title>dequeue_entity (779 samples, 1.65%)</title><rect x="16.6137%" y="85" width="1.6491%" height="15" fill="rgb(242,79,21)" fg:x="7848" fg:w="779"/><text x="16.8637%" y="95.50"></text></g><g><title>update_min_vruntime (17 samples, 0.04%)</title><rect x="18.2269%" y="69" width="0.0360%" height="15" fill="rgb(211,96,35)" fg:x="8610" fg:w="17"/><text x="18.4769%" y="79.50"></text></g><g><title>update_cfs_group (29 samples, 0.06%)</title><rect x="18.2628%" y="85" width="0.0614%" height="15" fill="rgb(253,215,40)" fg:x="8627" fg:w="29"/><text x="18.5128%" y="95.50"></text></g><g><title>update_curr (7 samples, 0.01%)</title><rect x="18.3242%" y="85" width="0.0148%" height="15" fill="rgb(211,81,21)" fg:x="8656" fg:w="7"/><text x="18.5742%" y="95.50"></text></g><g><title>dequeue_task_fair (863 samples, 1.83%)</title><rect x="16.5185%" y="101" width="1.8269%" height="15" fill="rgb(208,190,38)" fg:x="7803" fg:w="863"/><text x="16.7685%" y="111.50">d..</text></g><g><title>dequeue_task (886 samples, 1.88%)</title><rect x="16.4719%" y="117" width="1.8756%" height="15" fill="rgb(235,213,38)" fg:x="7781" fg:w="886"/><text x="16.7219%" y="127.50">d..</text></g><g><title>dequeue_task_fair (18 samples, 0.04%)</title><rect x="18.3475%" y="117" width="0.0381%" height="15" fill="rgb(237,122,38)" fg:x="8667" fg:w="18"/><text x="18.5975%" y="127.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (13 samples, 0.03%)</title><rect x="18.6227%" y="53" width="0.0275%" height="15" fill="rgb(244,218,35)" fg:x="8797" fg:w="13"/><text x="18.8727%" y="63.50"></text></g><g><title>__perf_event_task_sched_in (216 samples, 0.46%)</title><rect x="18.5042%" y="101" width="0.4573%" height="15" fill="rgb(240,68,47)" fg:x="8741" fg:w="216"/><text x="18.7542%" y="111.50"></text></g><g><title>x86_pmu_enable (177 samples, 0.37%)</title><rect x="18.5867%" y="85" width="0.3747%" height="15" fill="rgb(210,16,53)" fg:x="8780" fg:w="177"/><text x="18.8367%" y="95.50"></text></g><g><title>intel_tfa_pmu_enable_all (160 samples, 0.34%)</title><rect x="18.6227%" y="69" width="0.3387%" height="15" fill="rgb(235,124,12)" fg:x="8797" fg:w="160"/><text x="18.8727%" y="79.50"></text></g><g><title>native_write_msr (147 samples, 0.31%)</title><rect x="18.6502%" y="53" width="0.3112%" height="15" fill="rgb(224,169,11)" fg:x="8810" fg:w="147"/><text x="18.9002%" y="63.50"></text></g><g><title>finish_task_switch.isra.0 (275 samples, 0.58%)</title><rect x="18.3856%" y="117" width="0.5822%" height="15" fill="rgb(250,166,2)" fg:x="8685" fg:w="275"/><text x="18.6356%" y="127.50"></text></g><g><title>iterate_groups (16 samples, 0.03%)</title><rect x="18.9678%" y="117" width="0.0339%" height="15" fill="rgb(242,216,29)" fg:x="8960" fg:w="16"/><text x="19.2178%" y="127.50"></text></g><g><title>newidle_balance (40 samples, 0.08%)</title><rect x="19.1647%" y="85" width="0.0847%" height="15" fill="rgb(230,116,27)" fg:x="9053" fg:w="40"/><text x="19.4147%" y="95.50"></text></g><g><title>pick_next_task_fair (74 samples, 0.16%)</title><rect x="19.0990%" y="101" width="0.1567%" height="15" fill="rgb(228,99,48)" fg:x="9022" fg:w="74"/><text x="19.3490%" y="111.50"></text></g><g><title>pick_next_task_idle (53 samples, 0.11%)</title><rect x="19.2557%" y="101" width="0.1122%" height="15" fill="rgb(253,11,6)" fg:x="9096" fg:w="53"/><text x="19.5057%" y="111.50"></text></g><g><title>set_next_task_idle (39 samples, 0.08%)</title><rect x="19.2853%" y="85" width="0.0826%" height="15" fill="rgb(247,143,39)" fg:x="9110" fg:w="39"/><text x="19.5353%" y="95.50"></text></g><g><title>__update_idle_core (30 samples, 0.06%)</title><rect x="19.3044%" y="69" width="0.0635%" height="15" fill="rgb(236,97,10)" fg:x="9119" fg:w="30"/><text x="19.5544%" y="79.50"></text></g><g><title>put_prev_task_fair (41 samples, 0.09%)</title><rect x="19.3721%" y="101" width="0.0868%" height="15" fill="rgb(233,208,19)" fg:x="9151" fg:w="41"/><text x="19.6221%" y="111.50"></text></g><g><title>put_prev_entity (19 samples, 0.04%)</title><rect x="19.4187%" y="85" width="0.0402%" height="15" fill="rgb(216,164,2)" fg:x="9173" fg:w="19"/><text x="19.6687%" y="95.50"></text></g><g><title>pick_next_task (219 samples, 0.46%)</title><rect x="19.0017%" y="117" width="0.4636%" height="15" fill="rgb(220,129,5)" fg:x="8976" fg:w="219"/><text x="19.2517%" y="127.50"></text></g><g><title>pick_next_task_idle (8 samples, 0.02%)</title><rect x="19.4716%" y="117" width="0.0169%" height="15" fill="rgb(242,17,10)" fg:x="9198" fg:w="8"/><text x="19.7216%" y="127.50"></text></g><g><title>_raw_spin_lock (18 samples, 0.04%)</title><rect x="19.5563%" y="85" width="0.0381%" height="15" fill="rgb(242,107,0)" fg:x="9238" fg:w="18"/><text x="19.8063%" y="95.50"></text></g><g><title>perf_event_context_sched_out (31 samples, 0.07%)</title><rect x="19.5944%" y="85" width="0.0656%" height="15" fill="rgb(251,28,31)" fg:x="9256" fg:w="31"/><text x="19.8444%" y="95.50"></text></g><g><title>x86_pmu_disable (5 samples, 0.01%)</title><rect x="19.6494%" y="69" width="0.0106%" height="15" fill="rgb(233,223,10)" fg:x="9282" fg:w="5"/><text x="19.8994%" y="79.50"></text></g><g><title>__perf_event_task_sched_out (79 samples, 0.17%)</title><rect x="19.5203%" y="101" width="0.1672%" height="15" fill="rgb(215,21,27)" fg:x="9221" fg:w="79"/><text x="19.7703%" y="111.50"></text></g><g><title>x86_pmu_disable (12 samples, 0.03%)</title><rect x="19.6621%" y="85" width="0.0254%" height="15" fill="rgb(232,23,21)" fg:x="9288" fg:w="12"/><text x="19.9121%" y="95.50"></text></g><g><title>prepare_task_switch (95 samples, 0.20%)</title><rect x="19.4885%" y="117" width="0.2011%" height="15" fill="rgb(244,5,23)" fg:x="9206" fg:w="95"/><text x="19.7385%" y="127.50"></text></g><g><title>psi_group_change (8 samples, 0.02%)</title><rect x="19.6960%" y="117" width="0.0169%" height="15" fill="rgb(226,81,46)" fg:x="9304" fg:w="8"/><text x="19.9460%" y="127.50"></text></g><g><title>iterate_groups (72 samples, 0.15%)</title><rect x="19.8569%" y="101" width="0.1524%" height="15" fill="rgb(247,70,30)" fg:x="9380" fg:w="72"/><text x="20.1069%" y="111.50"></text></g><g><title>psi_flags_change (6 samples, 0.01%)</title><rect x="20.0093%" y="101" width="0.0127%" height="15" fill="rgb(212,68,19)" fg:x="9452" fg:w="6"/><text x="20.2593%" y="111.50"></text></g><g><title>psi_group_change (363 samples, 0.77%)</title><rect x="20.0220%" y="101" width="0.7684%" height="15" fill="rgb(240,187,13)" fg:x="9458" fg:w="363"/><text x="20.2720%" y="111.50"></text></g><g><title>psi_task_switch (559 samples, 1.18%)</title><rect x="19.7129%" y="117" width="1.1834%" height="15" fill="rgb(223,113,26)" fg:x="9312" fg:w="559"/><text x="19.9629%" y="127.50"></text></g><g><title>sched_clock_cpu (48 samples, 0.10%)</title><rect x="20.7947%" y="101" width="0.1016%" height="15" fill="rgb(206,192,2)" fg:x="9823" fg:w="48"/><text x="21.0447%" y="111.50"></text></g><g><title>sched_clock (36 samples, 0.08%)</title><rect x="20.8201%" y="85" width="0.0762%" height="15" fill="rgb(241,108,4)" fg:x="9835" fg:w="36"/><text x="21.0701%" y="95.50"></text></g><g><title>native_sched_clock (35 samples, 0.07%)</title><rect x="20.8222%" y="69" width="0.0741%" height="15" fill="rgb(247,173,49)" fg:x="9836" fg:w="35"/><text x="21.0722%" y="79.50"></text></g><g><title>put_prev_task_fair (27 samples, 0.06%)</title><rect x="20.8963%" y="117" width="0.0572%" height="15" fill="rgb(224,114,35)" fg:x="9871" fg:w="27"/><text x="21.1463%" y="127.50"></text></g><g><title>__schedule (2,339 samples, 4.95%)</title><rect x="16.1395%" y="133" width="4.9515%" height="15" fill="rgb(245,159,27)" fg:x="7624" fg:w="2339"/><text x="16.3895%" y="143.50">__sche..</text></g><g><title>update_rq_clock (52 samples, 0.11%)</title><rect x="20.9810%" y="117" width="0.1101%" height="15" fill="rgb(245,172,44)" fg:x="9911" fg:w="52"/><text x="21.2310%" y="127.50"></text></g><g><title>sched_clock_cpu (40 samples, 0.08%)</title><rect x="21.0064%" y="101" width="0.0847%" height="15" fill="rgb(236,23,11)" fg:x="9923" fg:w="40"/><text x="21.2564%" y="111.50"></text></g><g><title>sched_clock (34 samples, 0.07%)</title><rect x="21.0191%" y="85" width="0.0720%" height="15" fill="rgb(205,117,38)" fg:x="9929" fg:w="34"/><text x="21.2691%" y="95.50"></text></g><g><title>native_sched_clock (34 samples, 0.07%)</title><rect x="21.0191%" y="69" width="0.0720%" height="15" fill="rgb(237,72,25)" fg:x="9929" fg:w="34"/><text x="21.2691%" y="79.50"></text></g><g><title>pick_next_task (5 samples, 0.01%)</title><rect x="21.0995%" y="133" width="0.0106%" height="15" fill="rgb(244,70,9)" fg:x="9967" fg:w="5"/><text x="21.3495%" y="143.50"></text></g><g><title>prepare_task_switch (6 samples, 0.01%)</title><rect x="21.1101%" y="133" width="0.0127%" height="15" fill="rgb(217,125,39)" fg:x="9972" fg:w="6"/><text x="21.3601%" y="143.50"></text></g><g><title>probe_sched_switch (5 samples, 0.01%)</title><rect x="21.1228%" y="133" width="0.0106%" height="15" fill="rgb(235,36,10)" fg:x="9978" fg:w="5"/><text x="21.3728%" y="143.50"></text></g><g><title>schedule_hrtimeout_range (2,452 samples, 5.19%)</title><rect x="15.9533%" y="181" width="5.1907%" height="15" fill="rgb(251,123,47)" fg:x="7536" fg:w="2452"/><text x="16.2033%" y="191.50">schedu..</text></g><g><title>schedule_hrtimeout_range_clock (2,449 samples, 5.18%)</title><rect x="15.9596%" y="165" width="5.1844%" height="15" fill="rgb(221,13,13)" fg:x="7539" fg:w="2449"/><text x="16.2096%" y="175.50">schedu..</text></g><g><title>schedule (2,402 samples, 5.08%)</title><rect x="16.0591%" y="149" width="5.0849%" height="15" fill="rgb(238,131,9)" fg:x="7586" fg:w="2402"/><text x="16.3091%" y="159.50">schedu..</text></g><g><title>ep_poll (7,416 samples, 15.70%)</title><rect x="5.4490%" y="197" width="15.6992%" height="15" fill="rgb(211,50,8)" fg:x="2574" fg:w="7416"/><text x="5.6990%" y="207.50">ep_poll</text></g><g><title>fput (5 samples, 0.01%)</title><rect x="21.1525%" y="197" width="0.0106%" height="15" fill="rgb(245,182,24)" fg:x="9992" fg:w="5"/><text x="21.4025%" y="207.50"></text></g><g><title>fput_many (48 samples, 0.10%)</title><rect x="21.1630%" y="197" width="0.1016%" height="15" fill="rgb(242,14,37)" fg:x="9997" fg:w="48"/><text x="21.4130%" y="207.50"></text></g><g><title>do_epoll_wait (7,752 samples, 16.41%)</title><rect x="4.9113%" y="213" width="16.4105%" height="15" fill="rgb(246,228,12)" fg:x="2320" fg:w="7752"/><text x="5.1613%" y="223.50">do_epoll_wait</text></g><g><title>schedule_hrtimeout_range (27 samples, 0.06%)</title><rect x="21.2647%" y="197" width="0.0572%" height="15" fill="rgb(213,55,15)" fg:x="10045" fg:w="27"/><text x="21.5147%" y="207.50"></text></g><g><title>__x64_sys_epoll_wait (7,815 samples, 16.54%)</title><rect x="4.7885%" y="229" width="16.5439%" height="15" fill="rgb(209,9,3)" fg:x="2262" fg:w="7815"/><text x="5.0385%" y="239.50">__x64_sys_epoll_wait</text></g><g><title>amd_clear_divider (12 samples, 0.03%)</title><rect x="21.3324%" y="229" width="0.0254%" height="15" fill="rgb(230,59,30)" fg:x="10077" fg:w="12"/><text x="21.5824%" y="239.50"></text></g><g><title>do_epoll_wait (10 samples, 0.02%)</title><rect x="21.3578%" y="229" width="0.0212%" height="15" fill="rgb(209,121,21)" fg:x="10089" fg:w="10"/><text x="21.6078%" y="239.50"></text></g><g><title>exit_to_user_mode_prepare (6 samples, 0.01%)</title><rect x="21.3790%" y="229" width="0.0127%" height="15" fill="rgb(220,109,13)" fg:x="10099" fg:w="6"/><text x="21.6290%" y="239.50"></text></g><g><title>syscall_enter_from_user_mode (103 samples, 0.22%)</title><rect x="21.3917%" y="229" width="0.2180%" height="15" fill="rgb(232,18,1)" fg:x="10105" fg:w="103"/><text x="21.6417%" y="239.50"></text></g><g><title>syscall_trace_enter.constprop.0 (72 samples, 0.15%)</title><rect x="21.4573%" y="213" width="0.1524%" height="15" fill="rgb(215,41,42)" fg:x="10136" fg:w="72"/><text x="21.7073%" y="223.50"></text></g><g><title>perf_syscall_enter (14 samples, 0.03%)</title><rect x="21.5801%" y="197" width="0.0296%" height="15" fill="rgb(224,123,36)" fg:x="10194" fg:w="14"/><text x="21.8301%" y="207.50"></text></g><g><title>exit_to_user_mode_loop (5 samples, 0.01%)</title><rect x="24.2030%" y="213" width="0.0106%" height="15" fill="rgb(240,125,3)" fg:x="11433" fg:w="5"/><text x="24.4530%" y="223.50"></text></g><g><title>__put_user_nocheck_8 (37 samples, 0.08%)</title><rect x="24.6560%" y="165" width="0.0783%" height="15" fill="rgb(205,98,50)" fg:x="11647" fg:w="37"/><text x="24.9060%" y="175.50"></text></g><g><title>__get_user_8 (38 samples, 0.08%)</title><rect x="24.7682%" y="149" width="0.0804%" height="15" fill="rgb(205,185,37)" fg:x="11700" fg:w="38"/><text x="25.0182%" y="159.50"></text></g><g><title>__rseq_handle_notify_resume (159 samples, 0.34%)</title><rect x="24.5332%" y="181" width="0.3366%" height="15" fill="rgb(238,207,15)" fg:x="11589" fg:w="159"/><text x="24.7832%" y="191.50"></text></g><g><title>rseq_ip_fixup (63 samples, 0.13%)</title><rect x="24.7364%" y="165" width="0.1334%" height="15" fill="rgb(213,199,42)" fg:x="11685" fg:w="63"/><text x="24.9864%" y="175.50"></text></g><g><title>rseq_get_rseq_cs.isra.0 (10 samples, 0.02%)</title><rect x="24.8486%" y="149" width="0.0212%" height="15" fill="rgb(235,201,11)" fg:x="11738" fg:w="10"/><text x="25.0986%" y="159.50"></text></g><g><title>exit_to_user_mode_loop (236 samples, 0.50%)</title><rect x="24.3914%" y="197" width="0.4996%" height="15" fill="rgb(207,46,11)" fg:x="11522" fg:w="236"/><text x="24.6414%" y="207.50"></text></g><g><title>blkcg_maybe_throttle_current (10 samples, 0.02%)</title><rect x="24.8698%" y="181" width="0.0212%" height="15" fill="rgb(241,35,35)" fg:x="11748" fg:w="10"/><text x="25.1198%" y="191.50"></text></g><g><title>exit_to_user_mode_prepare (341 samples, 0.72%)</title><rect x="24.2136%" y="213" width="0.7219%" height="15" fill="rgb(243,32,47)" fg:x="11438" fg:w="341"/><text x="24.4636%" y="223.50"></text></g><g><title>switch_fpu_return (16 samples, 0.03%)</title><rect x="24.9016%" y="197" width="0.0339%" height="15" fill="rgb(247,202,23)" fg:x="11763" fg:w="16"/><text x="25.1516%" y="207.50"></text></g><g><title>fpregs_assert_state_consistent (7 samples, 0.01%)</title><rect x="24.9354%" y="213" width="0.0148%" height="15" fill="rgb(219,102,11)" fg:x="11779" fg:w="7"/><text x="25.1854%" y="223.50"></text></g><g><title>syscall_exit_to_user_mode (1,612 samples, 3.41%)</title><rect x="21.6097%" y="229" width="3.4125%" height="15" fill="rgb(243,110,44)" fg:x="10208" fg:w="1612"/><text x="21.8597%" y="239.50">sys..</text></g><g><title>syscall_exit_work (33 samples, 0.07%)</title><rect x="24.9524%" y="213" width="0.0699%" height="15" fill="rgb(222,74,54)" fg:x="11787" fg:w="33"/><text x="25.2024%" y="223.50"></text></g><g><title>do_syscall_64 (9,650 samples, 20.43%)</title><rect x="4.6001%" y="245" width="20.4285%" height="15" fill="rgb(216,99,12)" fg:x="2173" fg:w="9650"/><text x="4.8501%" y="255.50">do_syscall_64</text></g><g><title>syscall_enter_from_user_mode (12 samples, 0.03%)</title><rect x="25.0286%" y="245" width="0.0254%" height="15" fill="rgb(226,22,26)" fg:x="11823" fg:w="12"/><text x="25.2786%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (10,401 samples, 22.02%)</title><rect x="3.0611%" y="261" width="22.0183%" height="15" fill="rgb(217,163,10)" fg:x="1446" fg:w="10401"/><text x="3.3111%" y="271.50">entry_SYSCALL_64_after_hwframe</text></g><g><title>syscall_exit_to_user_mode (12 samples, 0.03%)</title><rect x="25.0540%" y="245" width="0.0254%" height="15" fill="rgb(213,25,53)" fg:x="11835" fg:w="12"/><text x="25.3040%" y="255.50"></text></g><g><title>epoll_wait (12,636 samples, 26.75%)</title><rect x="1.0669%" y="277" width="26.7497%" height="15" fill="rgb(252,105,26)" fg:x="504" fg:w="12636"/><text x="1.3169%" y="287.50">epoll_wait</text></g><g><title>syscall_return_via_sysret (1,293 samples, 2.74%)</title><rect x="25.0794%" y="261" width="2.7372%" height="15" fill="rgb(220,39,43)" fg:x="11847" fg:w="1293"/><text x="25.3294%" y="271.50">sy..</text></g><g><title>&lt;common::bpf_structs::RawPreadRecord as common::bpf_structs::FromBytes&gt;::from_bytes (654 samples, 1.38%)</title><rect x="32.9057%" y="229" width="1.3845%" height="15" fill="rgb(229,68,48)" fg:x="15544" fg:w="654"/><text x="33.1557%" y="239.50"></text></g><g><title>_int_malloc (3,015 samples, 6.38%)</title><rect x="35.6239%" y="213" width="6.3826%" height="15" fill="rgb(252,8,32)" fg:x="16828" fg:w="3015"/><text x="35.8739%" y="223.50">_int_mal..</text></g><g><title>tcache_put (50 samples, 0.11%)</title><rect x="41.9006%" y="197" width="0.1058%" height="15" fill="rgb(223,20,43)" fg:x="19793" fg:w="50"/><text x="42.1506%" y="207.50"></text></g><g><title>arena_for_chunk (13 samples, 0.03%)</title><rect x="42.0064%" y="213" width="0.0275%" height="15" fill="rgb(229,81,49)" fg:x="19843" fg:w="13"/><text x="42.2564%" y="223.50"></text></g><g><title>arena_for_chunk (13 samples, 0.03%)</title><rect x="42.0064%" y="197" width="0.0275%" height="15" fill="rgb(236,28,36)" fg:x="19843" fg:w="13"/><text x="42.2564%" y="207.50"></text></g><g><title>checked_request2size (9 samples, 0.02%)</title><rect x="42.0340%" y="213" width="0.0191%" height="15" fill="rgb(249,185,26)" fg:x="19856" fg:w="9"/><text x="42.2840%" y="223.50"></text></g><g><title>__GI___libc_malloc (3,992 samples, 8.45%)</title><rect x="34.2902%" y="229" width="8.4508%" height="15" fill="rgb(249,174,33)" fg:x="16198" fg:w="3992"/><text x="34.5402%" y="239.50">__GI___libc_..</text></g><g><title>tcache_get (325 samples, 0.69%)</title><rect x="42.0530%" y="213" width="0.6880%" height="15" fill="rgb(233,201,37)" fg:x="19865" fg:w="325"/><text x="42.3030%" y="223.50"></text></g><g><title>__rdl_alloc (13 samples, 0.03%)</title><rect x="42.7410%" y="229" width="0.0275%" height="15" fill="rgb(221,78,26)" fg:x="20190" fg:w="13"/><text x="42.9910%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,911 samples, 10.40%)</title><rect x="32.4061%" y="245" width="10.3963%" height="15" fill="rgb(250,127,30)" fg:x="15308" fg:w="4911"/><text x="32.6561%" y="255.50">&lt;alloc::vec::Ve..</text></g><g><title>__rust_alloc (16 samples, 0.03%)</title><rect x="42.7685%" y="229" width="0.0339%" height="15" fill="rgb(230,49,44)" fg:x="20203" fg:w="16"/><text x="43.0185%" y="239.50"></text></g><g><title>common::bpf_prog::create_event_handler::{{closure}} (7,463 samples, 15.80%)</title><rect x="32.3003%" y="261" width="15.7987%" height="15" fill="rgb(229,67,23)" fg:x="15258" fg:w="7463"/><text x="32.5503%" y="271.50">common::bpf_prog::create..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (2,502 samples, 5.30%)</title><rect x="42.8024%" y="245" width="5.2966%" height="15" fill="rgb(249,83,47)" fg:x="20219" fg:w="2502"/><text x="43.0524%" y="255.50">crossb..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (793 samples, 1.68%)</title><rect x="46.4203%" y="229" width="1.6787%" height="15" fill="rgb(215,43,3)" fg:x="21928" fg:w="793"/><text x="46.6703%" y="239.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (37 samples, 0.08%)</title><rect x="48.0207%" y="213" width="0.0783%" height="15" fill="rgb(238,154,13)" fg:x="22684" fg:w="37"/><text x="48.2707%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (22,273 samples, 47.15%)</title><rect x="1.0034%" y="341" width="47.1506%" height="15" fill="rgb(219,56,2)" fg:x="474" fg:w="22273"/><text x="1.2534%" y="351.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22,272 samples, 47.15%)</title><rect x="1.0055%" y="325" width="47.1485%" height="15" fill="rgb(233,0,4)" fg:x="475" fg:w="22272"/><text x="1.2555%" y="335.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>libbpf_rs::ringbuf::RingBuffer::poll (22,271 samples, 47.15%)</title><rect x="1.0077%" y="309" width="47.1464%" height="15" fill="rgb(235,30,7)" fg:x="476" fg:w="22271"/><text x="1.2577%" y="319.50">libbpf_rs::ringbuf::RingBuffer::poll</text></g><g><title>ring_buffer__poll (22,262 samples, 47.13%)</title><rect x="1.0267%" y="293" width="47.1273%" height="15" fill="rgb(250,79,13)" fg:x="485" fg:w="22262"/><text x="1.2767%" y="303.50">ring_buffer__poll</text></g><g><title>ringbuf_process_ring (9,606 samples, 20.34%)</title><rect x="27.8187%" y="277" width="20.3353%" height="15" fill="rgb(211,146,34)" fg:x="13141" fg:w="9606"/><text x="28.0687%" y="287.50">ringbuf_process_ring</text></g><g><title>libbpf_rs::ringbuf::RingBufferBuilder::call_sample_cb (26 samples, 0.06%)</title><rect x="48.0990%" y="261" width="0.0550%" height="15" fill="rgb(228,22,38)" fg:x="22721" fg:w="26"/><text x="48.3490%" y="271.50"></text></g><g><title>__clone3 (22,274 samples, 47.15%)</title><rect x="1.0034%" y="389" width="47.1527%" height="15" fill="rgb(235,168,5)" fg:x="474" fg:w="22274"/><text x="1.2534%" y="399.50">__clone3</text></g><g><title>start_thread (22,274 samples, 47.15%)</title><rect x="1.0034%" y="373" width="47.1527%" height="15" fill="rgb(221,155,16)" fg:x="474" fg:w="22274"/><text x="1.2534%" y="383.50">start_thread</text></g><g><title>std::sys::pal::unix::thread::Thread::new::thread_start (22,274 samples, 47.15%)</title><rect x="1.0034%" y="357" width="47.1527%" height="15" fill="rgb(215,215,53)" fg:x="474" fg:w="22274"/><text x="1.2534%" y="367.50">std::sys::pal::unix::thread::Thread::new::thread_start</text></g><g><title>btf__load_vmlinux_btf (8 samples, 0.02%)</title><rect x="51.5983%" y="213" width="0.0169%" height="15" fill="rgb(223,4,10)" fg:x="24374" fg:w="8"/><text x="51.8483%" y="223.50"></text></g><g><title>btf__parse (8 samples, 0.02%)</title><rect x="51.5983%" y="197" width="0.0169%" height="15" fill="rgb(234,103,6)" fg:x="24374" fg:w="8"/><text x="51.8483%" y="207.50"></text></g><g><title>btf_parse_raw (8 samples, 0.02%)</title><rect x="51.5983%" y="181" width="0.0169%" height="15" fill="rgb(227,97,0)" fg:x="24374" fg:w="8"/><text x="51.8483%" y="191.50"></text></g><g><title>btf_new (6 samples, 0.01%)</title><rect x="51.6025%" y="165" width="0.0127%" height="15" fill="rgb(234,150,53)" fg:x="24376" fg:w="6"/><text x="51.8525%" y="175.50"></text></g><g><title>&lt;ebpf_probe_pread::pread_query::unopt::imp::OpenPreadQuerySkel as libbpf_rs::skeleton::OpenSkel&gt;::load (12 samples, 0.03%)</title><rect x="51.5919%" y="261" width="0.0254%" height="15" fill="rgb(228,201,54)" fg:x="24371" fg:w="12"/><text x="51.8419%" y="271.50"></text></g><g><title>bpf_object__load_skeleton (12 samples, 0.03%)</title><rect x="51.5919%" y="245" width="0.0254%" height="15" fill="rgb(222,22,37)" fg:x="24371" fg:w="12"/><text x="51.8419%" y="255.50"></text></g><g><title>bpf_object__load (12 samples, 0.03%)</title><rect x="51.5919%" y="229" width="0.0254%" height="15" fill="rgb(237,53,32)" fg:x="24371" fg:w="12"/><text x="51.8419%" y="239.50"></text></g><g><title>_int_free (1,696 samples, 3.59%)</title><rect x="51.8608%" y="245" width="3.5903%" height="15" fill="rgb(233,25,53)" fg:x="24498" fg:w="1696"/><text x="52.1108%" y="255.50">_int..</text></g><g><title>__GI___libc_free (2,146 samples, 4.54%)</title><rect x="51.6173%" y="261" width="4.5430%" height="15" fill="rgb(210,40,34)" fg:x="24383" fg:w="2146"/><text x="51.8673%" y="271.50">__GI_..</text></g><g><title>arena_for_chunk (335 samples, 0.71%)</title><rect x="55.4511%" y="245" width="0.7092%" height="15" fill="rgb(241,220,44)" fg:x="26194" fg:w="335"/><text x="55.7011%" y="255.50"></text></g><g><title>arena_for_chunk (334 samples, 0.71%)</title><rect x="55.4532%" y="229" width="0.7071%" height="15" fill="rgb(235,28,35)" fg:x="26195" fg:w="334"/><text x="55.7032%" y="239.50"></text></g><g><title>heap_for_ptr (7 samples, 0.01%)</title><rect x="56.1455%" y="213" width="0.0148%" height="15" fill="rgb(210,56,17)" fg:x="26522" fg:w="7"/><text x="56.3955%" y="223.50"></text></g><g><title>__rdl_dealloc (7 samples, 0.01%)</title><rect x="56.1603%" y="261" width="0.0148%" height="15" fill="rgb(224,130,29)" fg:x="26529" fg:w="7"/><text x="56.4103%" y="271.50"></text></g><g><title>__rust_dealloc (11 samples, 0.02%)</title><rect x="56.1751%" y="261" width="0.0233%" height="15" fill="rgb(235,212,8)" fg:x="26536" fg:w="11"/><text x="56.4251%" y="271.50"></text></g><g><title>do_syscall_64 (20 samples, 0.04%)</title><rect x="91.3438%" y="213" width="0.0423%" height="15" fill="rgb(223,33,50)" fg:x="43149" fg:w="20"/><text x="91.5938%" y="223.50"></text></g><g><title>entry_SYSCALL_64 (314 samples, 0.66%)</title><rect x="91.3862%" y="213" width="0.6647%" height="15" fill="rgb(219,149,13)" fg:x="43169" fg:w="314"/><text x="91.6362%" y="223.50"></text></g><g><title>__x64_sys_sched_yield (32 samples, 0.07%)</title><rect x="92.9294%" y="197" width="0.0677%" height="15" fill="rgb(250,156,29)" fg:x="43898" fg:w="32"/><text x="93.1794%" y="207.50"></text></g><g><title>_raw_spin_lock (21 samples, 0.04%)</title><rect x="93.1856%" y="149" width="0.0445%" height="15" fill="rgb(216,193,19)" fg:x="44019" fg:w="21"/><text x="93.4356%" y="159.50"></text></g><g><title>_raw_spin_lock (26 samples, 0.06%)</title><rect x="93.4756%" y="117" width="0.0550%" height="15" fill="rgb(216,135,14)" fg:x="44156" fg:w="26"/><text x="93.7256%" y="127.50"></text></g><g><title>pick_next_entity (6 samples, 0.01%)</title><rect x="93.5709%" y="101" width="0.0127%" height="15" fill="rgb(241,47,5)" fg:x="44201" fg:w="6"/><text x="93.8209%" y="111.50"></text></g><g><title>pick_next_entity (20 samples, 0.04%)</title><rect x="93.8058%" y="85" width="0.0423%" height="15" fill="rgb(233,42,35)" fg:x="44312" fg:w="20"/><text x="94.0558%" y="95.50"></text></g><g><title>__calc_delta (21 samples, 0.04%)</title><rect x="93.9307%" y="69" width="0.0445%" height="15" fill="rgb(231,13,6)" fg:x="44371" fg:w="21"/><text x="94.1807%" y="79.50"></text></g><g><title>__cgroup_account_cputime (31 samples, 0.07%)</title><rect x="93.9752%" y="69" width="0.0656%" height="15" fill="rgb(207,181,40)" fg:x="44392" fg:w="31"/><text x="94.2252%" y="79.50"></text></g><g><title>cgroup_rstat_updated (5 samples, 0.01%)</title><rect x="94.0302%" y="53" width="0.0106%" height="15" fill="rgb(254,173,49)" fg:x="44418" fg:w="5"/><text x="94.2802%" y="63.50"></text></g><g><title>cpuacct_charge (30 samples, 0.06%)</title><rect x="94.0429%" y="69" width="0.0635%" height="15" fill="rgb(221,1,38)" fg:x="44424" fg:w="30"/><text x="94.2929%" y="79.50"></text></g><g><title>update_curr (125 samples, 0.26%)</title><rect x="93.8482%" y="85" width="0.2646%" height="15" fill="rgb(206,124,46)" fg:x="44332" fg:w="125"/><text x="94.0982%" y="95.50"></text></g><g><title>pick_next_task_fair (261 samples, 0.55%)</title><rect x="93.5836%" y="101" width="0.5525%" height="15" fill="rgb(249,21,11)" fg:x="44207" fg:w="261"/><text x="93.8336%" y="111.50"></text></g><g><title>update_min_vruntime (11 samples, 0.02%)</title><rect x="94.1128%" y="85" width="0.0233%" height="15" fill="rgb(222,201,40)" fg:x="44457" fg:w="11"/><text x="94.3628%" y="95.50"></text></g><g><title>pick_next_task (289 samples, 0.61%)</title><rect x="93.5306%" y="117" width="0.6118%" height="15" fill="rgb(235,61,29)" fg:x="44182" fg:w="289"/><text x="93.7806%" y="127.50"></text></g><g><title>__schedule (505 samples, 1.07%)</title><rect x="93.2618%" y="133" width="1.0691%" height="15" fill="rgb(219,207,3)" fg:x="44055" fg:w="505"/><text x="93.5118%" y="143.50"></text></g><g><title>update_rq_clock (81 samples, 0.17%)</title><rect x="94.1594%" y="117" width="0.1715%" height="15" fill="rgb(222,56,46)" fg:x="44479" fg:w="81"/><text x="94.4094%" y="127.50"></text></g><g><title>sched_clock_cpu (44 samples, 0.09%)</title><rect x="94.2377%" y="101" width="0.0931%" height="15" fill="rgb(239,76,54)" fg:x="44516" fg:w="44"/><text x="94.4877%" y="111.50"></text></g><g><title>sched_clock (39 samples, 0.08%)</title><rect x="94.2483%" y="85" width="0.0826%" height="15" fill="rgb(231,124,27)" fg:x="44521" fg:w="39"/><text x="94.4983%" y="95.50"></text></g><g><title>native_sched_clock (39 samples, 0.08%)</title><rect x="94.2483%" y="69" width="0.0826%" height="15" fill="rgb(249,195,6)" fg:x="44521" fg:w="39"/><text x="94.4983%" y="79.50"></text></g><g><title>schedule (528 samples, 1.12%)</title><rect x="93.2406%" y="149" width="1.1177%" height="15" fill="rgb(237,174,47)" fg:x="44045" fg:w="528"/><text x="93.4906%" y="159.50"></text></g><g><title>do_sched_yield (602 samples, 1.27%)</title><rect x="93.1051%" y="165" width="1.2744%" height="15" fill="rgb(206,201,31)" fg:x="43981" fg:w="602"/><text x="93.3551%" y="175.50"></text></g><g><title>yield_task_fair (10 samples, 0.02%)</title><rect x="94.3584%" y="149" width="0.0212%" height="15" fill="rgb(231,57,52)" fg:x="44573" fg:w="10"/><text x="94.6084%" y="159.50"></text></g><g><title>raw_spin_rq_unlock (9 samples, 0.02%)</title><rect x="94.3859%" y="165" width="0.0191%" height="15" fill="rgb(248,177,22)" fg:x="44586" fg:w="9"/><text x="94.6359%" y="175.50"></text></g><g><title>__x64_sys_sched_yield (649 samples, 1.37%)</title><rect x="93.1051%" y="181" width="1.3739%" height="15" fill="rgb(215,211,37)" fg:x="43981" fg:w="649"/><text x="93.3551%" y="191.50"></text></g><g><title>yield_task_fair (32 samples, 0.07%)</title><rect x="94.4113%" y="165" width="0.0677%" height="15" fill="rgb(241,128,51)" fg:x="44598" fg:w="32"/><text x="94.6613%" y="175.50"></text></g><g><title>amd_clear_divider (8 samples, 0.02%)</title><rect x="94.4790%" y="181" width="0.0169%" height="15" fill="rgb(227,165,31)" fg:x="44630" fg:w="8"/><text x="94.7290%" y="191.50"></text></g><g><title>do_sched_yield (7 samples, 0.01%)</title><rect x="94.4960%" y="181" width="0.0148%" height="15" fill="rgb(228,167,24)" fg:x="44638" fg:w="7"/><text x="94.7460%" y="191.50"></text></g><g><title>syscall_enter_from_user_mode (58 samples, 0.12%)</title><rect x="94.5150%" y="181" width="0.1228%" height="15" fill="rgb(228,143,12)" fg:x="44647" fg:w="58"/><text x="94.7650%" y="191.50"></text></g><g><title>syscall_trace_enter.constprop.0 (46 samples, 0.10%)</title><rect x="94.5404%" y="165" width="0.0974%" height="15" fill="rgb(249,149,8)" fg:x="44659" fg:w="46"/><text x="94.7904%" y="175.50"></text></g><g><title>perf_syscall_enter (17 samples, 0.04%)</title><rect x="94.6018%" y="149" width="0.0360%" height="15" fill="rgb(243,35,44)" fg:x="44688" fg:w="17"/><text x="94.8518%" y="159.50"></text></g><g><title>exit_to_user_mode_prepare (50 samples, 0.11%)</title><rect x="96.2911%" y="165" width="0.1058%" height="15" fill="rgb(246,89,9)" fg:x="45486" fg:w="50"/><text x="96.5411%" y="175.50"></text></g><g><title>fpregs_assert_state_consistent (8 samples, 0.02%)</title><rect x="96.3800%" y="149" width="0.0169%" height="15" fill="rgb(233,213,13)" fg:x="45528" fg:w="8"/><text x="96.6300%" y="159.50"></text></g><g><title>syscall_exit_to_user_mode (851 samples, 1.80%)</title><rect x="94.6378%" y="181" width="1.8015%" height="15" fill="rgb(233,141,41)" fg:x="44705" fg:w="851"/><text x="94.8878%" y="191.50">s..</text></g><g><title>syscall_exit_work (16 samples, 0.03%)</title><rect x="96.4054%" y="165" width="0.0339%" height="15" fill="rgb(239,167,4)" fg:x="45540" fg:w="16"/><text x="96.6554%" y="175.50"></text></g><g><title>do_syscall_64 (1,627 samples, 3.44%)</title><rect x="92.9972%" y="197" width="3.4443%" height="15" fill="rgb(209,217,16)" fg:x="43930" fg:w="1627"/><text x="93.2472%" y="207.50">do_..</text></g><g><title>syscall_enter_from_user_mode (8 samples, 0.02%)</title><rect x="96.4414%" y="197" width="0.0169%" height="15" fill="rgb(219,88,35)" fg:x="45557" fg:w="8"/><text x="96.6914%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (2,102 samples, 4.45%)</title><rect x="92.0509%" y="213" width="4.4498%" height="15" fill="rgb(220,193,23)" fg:x="43483" fg:w="2102"/><text x="92.3009%" y="223.50">entry..</text></g><g><title>syscall_exit_to_user_mode (20 samples, 0.04%)</title><rect x="96.4584%" y="197" width="0.0423%" height="15" fill="rgb(230,90,52)" fg:x="45565" fg:w="20"/><text x="96.7084%" y="207.50"></text></g><g><title>__GI___sched_yield (3,267 samples, 6.92%)</title><rect x="91.2655%" y="229" width="6.9160%" height="15" fill="rgb(252,106,19)" fg:x="43112" fg:w="3267"/><text x="91.5155%" y="239.50">__GI___sc..</text></g><g><title>syscall_return_via_sysret (793 samples, 1.68%)</title><rect x="96.5028%" y="213" width="1.6787%" height="15" fill="rgb(206,74,20)" fg:x="45586" fg:w="793"/><text x="96.7528%" y="223.50"></text></g><g><title>__hrtimer_run_queues (6 samples, 0.01%)</title><rect x="98.1837%" y="165" width="0.0127%" height="15" fill="rgb(230,138,44)" fg:x="46380" fg:w="6"/><text x="98.4337%" y="175.50"></text></g><g><title>tick_sched_timer (6 samples, 0.01%)</title><rect x="98.1837%" y="149" width="0.0127%" height="15" fill="rgb(235,182,43)" fg:x="46380" fg:w="6"/><text x="98.4337%" y="159.50"></text></g><g><title>tick_sched_handle (5 samples, 0.01%)</title><rect x="98.1858%" y="133" width="0.0106%" height="15" fill="rgb(242,16,51)" fg:x="46381" fg:w="5"/><text x="98.4358%" y="143.50"></text></g><g><title>update_process_times (5 samples, 0.01%)</title><rect x="98.1858%" y="117" width="0.0106%" height="15" fill="rgb(248,9,4)" fg:x="46381" fg:w="5"/><text x="98.4358%" y="127.50"></text></g><g><title>__sysvec_apic_timer_interrupt (8 samples, 0.02%)</title><rect x="98.1837%" y="197" width="0.0169%" height="15" fill="rgb(210,31,22)" fg:x="46380" fg:w="8"/><text x="98.4337%" y="207.50"></text></g><g><title>hrtimer_interrupt (8 samples, 0.02%)</title><rect x="98.1837%" y="181" width="0.0169%" height="15" fill="rgb(239,54,39)" fg:x="46380" fg:w="8"/><text x="98.4337%" y="191.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (9 samples, 0.02%)</title><rect x="98.1837%" y="229" width="0.0191%" height="15" fill="rgb(230,99,41)" fg:x="46380" fg:w="9"/><text x="98.4337%" y="239.50"></text></g><g><title>sysvec_apic_timer_interrupt (9 samples, 0.02%)</title><rect x="98.1837%" y="213" width="0.0191%" height="15" fill="rgb(253,106,12)" fg:x="46380" fg:w="9"/><text x="98.4337%" y="223.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (118 samples, 0.25%)</title><rect x="98.2070%" y="213" width="0.2498%" height="15" fill="rgb(213,46,41)" fg:x="46391" fg:w="118"/><text x="98.4570%" y="223.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (10 samples, 0.02%)</title><rect x="98.4568%" y="213" width="0.0212%" height="15" fill="rgb(215,133,35)" fg:x="46509" fg:w="10"/><text x="98.7068%" y="223.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::unregister (6 samples, 0.01%)</title><rect x="98.4779%" y="213" width="0.0127%" height="15" fill="rgb(213,28,5)" fg:x="46519" fg:w="6"/><text x="98.7279%" y="223.50"></text></g><g><title>std::sys::sync::mutex::futex::Mutex::lock_contended (5 samples, 0.01%)</title><rect x="98.4800%" y="197" width="0.0106%" height="15" fill="rgb(215,77,49)" fg:x="46520" fg:w="5"/><text x="98.7300%" y="207.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv::{{closure}} (137 samples, 0.29%)</title><rect x="98.2027%" y="229" width="0.2900%" height="15" fill="rgb(248,100,22)" fg:x="46389" fg:w="137"/><text x="98.4527%" y="239.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (10 samples, 0.02%)</title><rect x="98.4927%" y="229" width="0.0212%" height="15" fill="rgb(208,67,9)" fg:x="46526" fg:w="10"/><text x="98.7427%" y="239.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (19,950 samples, 42.23%)</title><rect x="56.2958%" y="245" width="42.2329%" height="15" fill="rgb(219,133,21)" fg:x="26593" fg:w="19950"/><text x="56.5458%" y="255.50">crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv</text></g><g><title>[[vdso]] (335 samples, 0.71%)</title><rect x="98.5944%" y="213" width="0.7092%" height="15" fill="rgb(246,46,29)" fg:x="46574" fg:w="335"/><text x="98.8444%" y="223.50"></text></g><g><title>[[vdso]] (228 samples, 0.48%)</title><rect x="98.8209%" y="197" width="0.4827%" height="15" fill="rgb(246,185,52)" fg:x="46681" fg:w="228"/><text x="99.0709%" y="207.50"></text></g><g><title>std::sys::pal::unix::time::Timespec::now (374 samples, 0.79%)</title><rect x="98.5287%" y="245" width="0.7917%" height="15" fill="rgb(252,136,11)" fg:x="46543" fg:w="374"/><text x="98.7787%" y="255.50"></text></g><g><title>__GI___clock_gettime (354 samples, 0.75%)</title><rect x="98.5711%" y="229" width="0.7494%" height="15" fill="rgb(219,138,53)" fg:x="46563" fg:w="354"/><text x="98.8211%" y="239.50"></text></g><g><title>__vdso_clock_gettime (8 samples, 0.02%)</title><rect x="99.3035%" y="213" width="0.0169%" height="15" fill="rgb(211,51,23)" fg:x="46909" fg:w="8"/><text x="99.5535%" y="223.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv_timeout (20,397 samples, 43.18%)</title><rect x="56.2026%" y="261" width="43.1792%" height="15" fill="rgb(247,221,28)" fg:x="26549" fg:w="20397"/><text x="56.4526%" y="271.50">crossbeam_channel::channel::Receiver&lt;T&gt;::recv_timeout</text></g><g><title>std::time::SystemTime::checked_add (25 samples, 0.05%)</title><rect x="99.3289%" y="245" width="0.0529%" height="15" fill="rgb(251,222,45)" fg:x="46921" fg:w="25"/><text x="99.5789%" y="255.50"></text></g><g><title>__libc_start_main_impl (24,199 samples, 51.23%)</title><rect x="48.1561%" y="373" width="51.2278%" height="15" fill="rgb(217,162,53)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="383.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (24,199 samples, 51.23%)</title><rect x="48.1561%" y="357" width="51.2278%" height="15" fill="rgb(229,93,14)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="367.50">__libc_start_call_main</text></g><g><title>main (24,199 samples, 51.23%)</title><rect x="48.1561%" y="341" width="51.2278%" height="15" fill="rgb(209,67,49)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="351.50">main</text></g><g><title>std::rt::lang_start_internal (24,199 samples, 51.23%)</title><rect x="48.1561%" y="325" width="51.2278%" height="15" fill="rgb(213,87,29)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="335.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (24,199 samples, 51.23%)</title><rect x="48.1561%" y="309" width="51.2278%" height="15" fill="rgb(205,151,52)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="319.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (24,199 samples, 51.23%)</title><rect x="48.1561%" y="293" width="51.2278%" height="15" fill="rgb(253,215,39)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="303.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ebpf_probe_pread::main (24,199 samples, 51.23%)</title><rect x="48.1561%" y="277" width="51.2278%" height="15" fill="rgb(221,220,41)" fg:x="22748" fg:w="24199"/><text x="48.4061%" y="287.50">ebpf_probe_pread::main</text></g><g><title>_start (24,200 samples, 51.23%)</title><rect x="48.1561%" y="389" width="51.2299%" height="15" fill="rgb(218,133,21)" fg:x="22748" fg:w="24200"/><text x="48.4061%" y="399.50">_start</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (22 samples, 0.05%)</title><rect x="99.3903%" y="389" width="0.0466%" height="15" fill="rgb(221,193,43)" fg:x="46950" fg:w="22"/><text x="99.6403%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (18 samples, 0.04%)</title><rect x="99.4390%" y="389" width="0.0381%" height="15" fill="rgb(240,128,52)" fg:x="46973" fg:w="18"/><text x="99.6890%" y="399.50"></text></g><g><title>entry_SYSCALL_64_safe_stack (214 samples, 0.45%)</title><rect x="99.4771%" y="389" width="0.4530%" height="15" fill="rgb(253,114,12)" fg:x="46991" fg:w="214"/><text x="99.7271%" y="399.50"></text></g><g><title>ret_from_fork (14 samples, 0.03%)</title><rect x="99.9301%" y="389" width="0.0296%" height="15" fill="rgb(215,223,47)" fg:x="47205" fg:w="14"/><text x="100.1801%" y="399.50"></text></g><g><title>schedule_tail (14 samples, 0.03%)</title><rect x="99.9301%" y="373" width="0.0296%" height="15" fill="rgb(248,225,23)" fg:x="47205" fg:w="14"/><text x="100.1801%" y="383.50"></text></g><g><title>finish_task_switch.isra.0 (14 samples, 0.03%)</title><rect x="99.9301%" y="357" width="0.0296%" height="15" fill="rgb(250,108,0)" fg:x="47205" fg:w="14"/><text x="100.1801%" y="367.50"></text></g><g><title>__perf_event_task_sched_in (13 samples, 0.03%)</title><rect x="99.9323%" y="341" width="0.0275%" height="15" fill="rgb(228,208,7)" fg:x="47206" fg:w="13"/><text x="100.1823%" y="351.50"></text></g><g><title>x86_pmu_enable (13 samples, 0.03%)</title><rect x="99.9323%" y="325" width="0.0275%" height="15" fill="rgb(244,45,10)" fg:x="47206" fg:w="13"/><text x="100.1823%" y="335.50"></text></g><g><title>intel_tfa_pmu_enable_all (13 samples, 0.03%)</title><rect x="99.9323%" y="309" width="0.0275%" height="15" fill="rgb(207,125,25)" fg:x="47206" fg:w="13"/><text x="100.1823%" y="319.50"></text></g><g><title>native_write_msr (13 samples, 0.03%)</title><rect x="99.9323%" y="293" width="0.0275%" height="15" fill="rgb(210,195,18)" fg:x="47206" fg:w="13"/><text x="100.1823%" y="303.50"></text></g><g><title>ebpf-probe-prea (47,232 samples, 99.99%)</title><rect x="0.0000%" y="405" width="99.9873%" height="15" fill="rgb(249,80,12)" fg:x="0" fg:w="47232"/><text x="0.2500%" y="415.50">ebpf-probe-prea</text></g><g><title>syscall_return_via_sysret (13 samples, 0.03%)</title><rect x="99.9598%" y="389" width="0.0275%" height="15" fill="rgb(221,65,9)" fg:x="47219" fg:w="13"/><text x="100.2098%" y="399.50"></text></g><g><title>all (47,238 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(235,49,36)" fg:x="0" fg:w="47238"/><text x="0.2500%" y="431.50"></text></g><g><title>perf-exec (6 samples, 0.01%)</title><rect x="99.9873%" y="405" width="0.0127%" height="15" fill="rgb(225,32,20)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="415.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.01%)</title><rect x="99.9873%" y="389" width="0.0127%" height="15" fill="rgb(215,141,46)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="399.50"></text></g><g><title>do_syscall_64 (6 samples, 0.01%)</title><rect x="99.9873%" y="373" width="0.0127%" height="15" fill="rgb(250,160,47)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="383.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.01%)</title><rect x="99.9873%" y="357" width="0.0127%" height="15" fill="rgb(216,222,40)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="367.50"></text></g><g><title>do_execveat_common.isra.0 (6 samples, 0.01%)</title><rect x="99.9873%" y="341" width="0.0127%" height="15" fill="rgb(234,217,39)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="351.50"></text></g><g><title>bprm_execve (6 samples, 0.01%)</title><rect x="99.9873%" y="325" width="0.0127%" height="15" fill="rgb(207,178,40)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="335.50"></text></g><g><title>bprm_execve.part.0 (6 samples, 0.01%)</title><rect x="99.9873%" y="309" width="0.0127%" height="15" fill="rgb(221,136,13)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="319.50"></text></g><g><title>exec_binprm (6 samples, 0.01%)</title><rect x="99.9873%" y="293" width="0.0127%" height="15" fill="rgb(249,199,10)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="303.50"></text></g><g><title>search_binary_handler (6 samples, 0.01%)</title><rect x="99.9873%" y="277" width="0.0127%" height="15" fill="rgb(249,222,13)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="287.50"></text></g><g><title>load_elf_binary (6 samples, 0.01%)</title><rect x="99.9873%" y="261" width="0.0127%" height="15" fill="rgb(244,185,38)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="271.50"></text></g><g><title>begin_new_exec (6 samples, 0.01%)</title><rect x="99.9873%" y="245" width="0.0127%" height="15" fill="rgb(236,202,9)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="255.50"></text></g><g><title>perf_event_exec (6 samples, 0.01%)</title><rect x="99.9873%" y="229" width="0.0127%" height="15" fill="rgb(250,229,37)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="239.50"></text></g><g><title>ctx_resched (6 samples, 0.01%)</title><rect x="99.9873%" y="213" width="0.0127%" height="15" fill="rgb(206,174,23)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="223.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.01%)</title><rect x="99.9873%" y="197" width="0.0127%" height="15" fill="rgb(211,33,43)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="207.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.01%)</title><rect x="99.9873%" y="181" width="0.0127%" height="15" fill="rgb(245,58,50)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="191.50"></text></g><g><title>native_write_msr (6 samples, 0.01%)</title><rect x="99.9873%" y="165" width="0.0127%" height="15" fill="rgb(244,68,36)" fg:x="47232" fg:w="6"/><text x="100.2373%" y="175.50"></text></g></svg></svg>